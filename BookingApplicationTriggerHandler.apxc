///////////////////////////////////////////////////////////////
//
// Name: BookingApplicationTriggerHandler
// Author: David Serrano, Salesforce Trainee
// Created: 04/8/21
// Updated: 04/14/21
// Description: Handler to implement logic behind the Booking Application Trigger
//
///////////////////////////////////////////////////////////////

public class BookingApplicationTriggerHandler {
    
    // CreateFlightTicket creates a new Flight Ticket object when a Booking Application has been approved
    // and fills in the fields with relevant information.
    public static void CreateFlightTicket(List<Booking_Application__c> application){
        
        Set<Id> scheduleIds = new Set<Id>();
        Set<Id> detailIds = new Set<Id>();
        Set<Id> spaceshipIds = new Set<Id>();
        
        // chain of getting necessary Id's and querying upwards to traverse through parents for appropriate spaceship Id
        for(Booking_Application__c a:application){scheduleIds.add(a.Schedule__c); }
        List<Schedule__c> schedules = [SELECT Launch_Detail__c FROM Schedule__c WHERE Id IN :scheduleIds]; 
        for(Schedule__c s:schedules){ detailIds.add(s.Launch_Detail__c); }
        List<Launch_Detail__c> details = [SELECT Spaceship__c FROM Launch_Detail__c WHERE Id IN :detailIds];
        for(Launch_Detail__c d:details){ spaceshipIds.add(d.Spaceship__c); }
        
        List<Spaceship__c> spaceships = [SELECT Name FROM Spaceship__c WHERE Id IN :spaceshipIds];
        List<Seat__c> seats = [SELECT Id, Status__c FROM Seat__c WHERE Spaceship__c IN :spaceshipIds];
       	
        
        List<Flight_Ticket__c> newTickets = new List<Flight_Ticket__c>();
        for(Booking_Application__c a:application){  
            if(a.Application_Status__c == 'Approved'){ 
                Flight_Ticket__c ticket = new Flight_Ticket__c();
                ticket.Name = spaceships.get(0).Name + ' Ticket';               
                ticket.Flight_Schedule__c = a.Schedule__c;
                ticket.Astronaut__c = a.Astronaut__c;
                
                // find the next available seat and set it to booked
                for(Seat__c s:seats){
                    if(s.Status__c == 'Vacant'){
                        s.Status__c = 'Booked';
                        ticket.Seat__c = s.Id;
                        break;
                    }
                }
               newTickets.add(ticket);
            }
        }
        update seats;
        insert newTickets;
    }
}